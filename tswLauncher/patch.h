#include "tswLauncher.h"

#define EXEFILE_BASE_ADDR (-0xC00) // 0x400C00 in memory maps to zero offset in the exe file
#define EXEFILE_OFFSET(addr) addr+EXEFILE_BASE_ADDR
#define ADDR_SIGNATURE 0x88E74 // title (Tower of the Sorcerer / 魔塔)
#define LEN_SIGNATURE 64
#define ADDR_FONT 0x894A6 // default: db 0F, 'ＭＳ Ｐゴシック' (in Shift-JIS encoding)

#define MAX_LEN_PATCH_BYTES 512 // used to determine buffer size; no patch item will be longer than 512 bytes

// Blow 2 lines: For the restoration operation to be compatible with new TSW EXEs, where the OnClick event handler of the TTSW10.N7 TMenuItem is associated with TTSW10.speedsup
#define ADDR_REV_1_1 0x41bfe
#define BYTES_ORI_REV_1_1 "\x44\xF5\x47\x00\x08speedlow" // the real original bytes; patches[0].patches[0].oriBytes below is the "fake" original bytes
// the origin of the fake original bytes "\x7C\xF4\x47\x00\x08speedsup": after restoration, for TTSW10.N7.OnClick to still work, a handler pointer needs to be assigned, so we assign it here to the original speedhigh function, so after clicking the SuperFast menu item, the high speed profile will take effect. The assignment of speedlow function to pointer 0x47f544 is not necessary because it is never referenced

// Below 5 lines: To be compatible with old tswRev patches (< v3.1: where only timer intervals are changed without Rev1; v3.1.0: incomplete Rev1 patch)
#define ADDR_REV_1_2 0x7f47f // for v3.1.0, completed patches are Rev1_1 (0x41bfe), Rev1_8 (0x7d387), and Rev1_9 (0x7d7fa), so they are checked first; Rev1_2 (this one; 0x7f47f) is partially patched; others are not patched
#define OFFSET_NO_REV_1_2 {117, 133, 101, 17, 33, 1} // (< v3.1) Mid,Timer2; Mid,Timer3; Mid,Timer1; Fast,Timer2; Fast,Timer3; Fast,Timer1
#define INDEX_NO_REV_1_2 {0, 1, 1, 2, 3, 3} // (< v3.1) patches[1-1][2-1].vars.charVars[INDEX_NO_REV_1_2[i]] should be equal to the char at OFFSET_NO_REV_1_2[i]
#define OFFSET_OLD_REV_1_2 123
#define BYTES_OLD_REV_1_2 "\x58\x84\xC0\x0F\x94\xC2\x8B\x83\x58\x03\x00\x00\xE8\xE5\x0D\xF9\xFF\x31\xD2\x8B\x83\xB0\x03\x00\x00\xE8\xD8\x0D\xF9\xFF\x5B\xC3\x90"

// Below 3 lines: To be compatible with old tswRev patch (v3.1.5) for Rev4 (kernel32.LoadLibraryA instead of better kernel32.GetModuleHandleA)
#define ADDR_REV_4_2 0x4c114
#define OFFSET_OLD_REV_4_2 45
#define WORD_OLD_REV_4_2 0x8ab7

// Below 4 lines: To be compatible with old tswRev patches (v3.1.5) without Rev10-b (avoid arrow-key long-press misoperation)
#define ADDR_REV_10_3 0x60d78
#define ADDR_REV_10_8 0x617b6
#define BYTES_OLD_REV_10_3 "\x0F\xB6\x0E\x8B\x83\x0C\x03\x00\x00\xBA\xC7\xC5\x48\x00\x38\x0A\x88\x0A\x9C\x74\x0F\x8A\x0D\x9F\x9B\x48\x00\x8A\x89\x74\x0C\x46\x00\x89\x48\x24\xB2\x01\xE8\xB1\xB6\xFC\xFF\x9D\x74\x08\x0F\xB6\x0E\xE8\x4A\x0A\x00\x00\xE9\xF0\x02\x00\x00\x90\x00\x00\x8B\xC3\xE8\xD3\x36\xFE\xFF\xE9\xE1\x02\x00\x00"
#define BYTES_OLD_REV_10_8 "\x50\x50\xE8\x0F\x38\xFA\xFF\x31\xD2\x66\x85\xC0\x8B\x83\x0C\x03\x00\x00\xB9\x78\x0C\x46\x00\x9C\x78\x0C\x88\x15\xC7\xC5\x48\x00\x88\x50\x20\x8D\x49\x04\x8A\x15\x9F\x9B\x48\x00\x8A\x14\x11\x83\xC2\x32\xE8\x77\xAC\xFC\xFF\x9D\x59\x79\x05\xE8\x02\x00\x00\x00\x5B\xC3\x80\xE9\x25\x8B\x93\x28\x03\x00\x00\x80\x7A\x29\x01\x75\xF0\x8B\xC3\xFF\x24\x8D\x80\x0C\x46\x00\x0F\x84\xE2\x00\x00\x00\x8B\xC3\xE8\x73\x2C\xFE\xFF\xE9\xD6\x00\x00\x00\x6B\x15\xA4\x86\x4B\x00\x0B\xA1\xA0\x86\x4B\x00\x03\xD0\x89\x15\x80\xC5\x48\x00\x8B\x15\x80\xC5\x48\x00\x42\x89\x15\x84\xC5\x48\x00\x83\xF8\x0A\x0F\x84\xAC\x00\x00\x00\x8B\xC3\xE8\x3D\x2C\xFE\xFF\xE9\xA0\x00\x00\x00\xA1\xA4\x86\x4B\x00\x6B\xD0\x0B\x03\x15\xA0\x86\x4B\x00\x89\x15\x80\xC5\x48\x00\x8B\x15\x80\xC5\x48\x00\x83\xC2\x0B\x89\x15\x84\xC5\x48\x00\x83\xF8\x0A\x74\x78\x8B\xC3\xE8\x09"

#define INTERVAL_MIN_VALS { \
    50, 50, 50, 50, \
    10, 10, 10, 10, \
     0,  0,  0,  0, \
    50, 50, 50, 50, \
     0,  0,  0,  0} // rows: tile; event; move; keybd; anti-misop; cols: super; high; middle; low
#define INTERVAL_MAX_VALS { \
    255, 255, 255, 500, \
    255, 255, 255, 500, \
    255, 255, 255, 500, \
    255, 255, 255, 255, \
      5,   5,   5,   5} // rows: tile; event; move; keybd; anti-misop; cols: super; high; middle; low
#define INTERVAL_DEFAULT_VALS { \
       125, 200, 275, \
    10, 50, 100, 150, \
    40, 56, 112, 168, \
    50, 70, 150, 225, \
     2,  2,   0,   0} // // rows: tile (for this row, super does not matter, so ignored); event; move; keybd; anti-misop; cols: super; high; middle; low

#define MAX_FONT_NUM 256 // this is not the actual "maximum number font entries"; just an estimate, used to pre-allocate a memory block for CB_INITSTORAGE for better performance
#define EN_FONT_NAME_A "Verdana"
#define CN_FONT_NAME L"微软雅黑"
#define CN_FONT_NAME_A "\xCE\xA2\xC8\xED\xD1\xC5\xBA\xDA" // "微软雅黑", GBK encoded
#define CN_FONT_NAME_E "Microsoft YaHei"
#define JA_FONT_NAME L"ＭＳ Ｐゴシック"
#define JA_FONT_NAME_A "\x82\x6C\x82\x72\x20\x82\x6F\x83\x53\x83\x56\x83\x62\x83\x4E" // "ＭＳ Ｐゴシック", SHIFT_JIS encoded
#define JA_FONT_NAME_A_2 "\xA3\xCD\xA3\xD3\x20\xA3\xD0\xA5\xB4\xA5\xB7\xA5\xC3\xA5\xAF" // "ＭＳ Ｐゴシック", GBK encoded
#define JA_FONT_NAME_E "MS PGothic"

typedef struct { // single patch item
  const uintptr_t exeOffset;
  const UINT lenBytes;
  char* oriBytes;
  char* revBytes;
  const UINT* offsetVars;
  const UINT lenVars;
  union { // array [lenVars]
    BYTE* varChars;
    WORD* varWords;
    DWORD* varDwords;
  } vars;
} patchStruct; // in this struct, arrays are present in the form of pointers; when initialized, must convert them using directive like (char[]){...}; otherwise, static const arrays can't be modified, or it will lead to program crash. Also, string literals should not be used to initialize `oriBytes` or `revBytes` because they are `char*` and will be stored in static memory by compiler (i.e., can't be modified)

typedef struct { // one Rev, containing multiple patch items
  char statePatches; // 0: original; 1: patched; 2: invalid
  const UCHAR lenPatches;
  patchStruct* patches; // patchStruct array [lenPatches]
} patchStructUnion;

// macro magics below to save efforts in explicitly writing out zero arrays
#define NewArr1 {0}
#define NewArr2 {0, 0}
#define NewArr3 {0, 0, 0}
#define NewArr4 {0, 0, 0, 0}
#define NewArr5 {0, 0, 0, 0, 0}
#define NewArr6 {0, 0, 0, 0, 0, 0}
#define NewArr7 {0, 0, 0, 0, 0, 0, 0}
#define NewArr8 {0, 0, 0, 0, 0, 0, 0, 0}
#define NewArr9 {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define NewArr10 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define NewArr11 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define NewArr12 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define IndexNArgs(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, N, ...) N
#define IndexNArgs2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, N, ...) N, {(UCHAR[])NewArr##N}
#define NArgs(...) IndexNArgs(__VA_ARGS__, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1) // number of args (1 to 12); inspired by http://groups.google.com/group/comp.std.c/browse_thread/thread/77ee8c8f92e4a3fb/346fc464319b1ee5?pli=1
#define NewArrNArgs2(...) IndexNArgs2(__VA_ARGS__, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1) // create a new char array {0, 0, ..., 0} with its length equal to the number of args (1 to 12)

#define ArrLen(...) sizeof((uintptr_t[])__VA_ARGS__)/sizeof(uintptr_t)

#define Chr_N_Len(...) ArrLen(__VA_ARGS__), (char[])__VA_ARGS__
#define Var_N_Len(...) (const UINT[]){__VA_ARGS__}, NewArrNArgs2(__VA_ARGS__)
#define Patch_N_Len(...) sizeof((patchStruct[]){__VA_ARGS__})/sizeof(patchStruct), (patchStruct[]){__VA_ARGS__}
#define VarEmpty NULL, 0, {NULL}

const int offset_old_rev_1_2[] = OFFSET_NO_REV_1_2;
const int index_no_rev_1_2[] = INDEX_NO_REV_1_2;
patchStruct lowSpeedIntv = {EXEFILE_OFFSET(0x7f548), 17, NULL, NULL, (UINT[]){8, 0, 16}, 3, {.varWords = (WORD[]){0, 0, 0}}};
// instead of typical CHAR arrays, this patchStruct contains WORD arrays: the actual offsets (lowSpeedIntv.vars.varWords) are 0 (Timer1->0x7f548), 2*8 (Timer2->0x7f558), and 2*16 (Timer3->0x7f568); since the shortest consecutive bytes that can cover all 3 vars need a space of 32+2 = 34 bytes, so 17 WORDs (lowSpeedIntv.lenBytes) need to be read
patchStruct tHintWindowFont[] = {{EXEFILE_OFFSET(0x17257), 1, "\x74", "\xEB"}, {EXEFILE_OFFSET(0x17285), 4, "\xC0\x72\x41", "\xA6\x94\x48"}, {EXEFILE_OFFSET(0x24114), 6, "\x8D\x95\xFF\xFE\xFF\xFF", "\xBA\x74\x8E\x48\x00\x90"}}; // Rev3-b and Rev3-a (just revise Rev3-a (default title) anyway; it's not a big deal)

const int interval_min_vals[] = INTERVAL_MIN_VALS;
const int interval_max_vals[] = INTERVAL_MAX_VALS;
const int interval_default_vals[] = INTERVAL_DEFAULT_VALS;

#define patchVar(Type, revInd, patchInd, varInd) patches[revInd].patches[patchInd].vars.var##Type##s[varInd]
UCHAR misop_vals[] = NewArr4; // anti-misop values; will be used by both patch.c and gui.c (trackbar values)
patchStructUnion patches[] = {
  {0, Patch_N_Len( // Rev 1: superfast speed mode
    {EXEFILE_OFFSET(0x41bfe), Chr_N_Len({0x7C,0xF4,0x47,0x00,0x08,0x73,0x70,0x65,0x65,0x64,0x73,0x75,0x70}), (char[]){0xD8,0xF4,0x47,0x00,0x08,0x73,0x70,0x65,0x65,0x64,0x73,0x75,0x70}, VarEmpty}, // 1-1
    {EXEFILE_OFFSET(0x7d387), Chr_N_Len({0xC6,0x05,0x9F,0x9B,0x48,0x00,0x02,0x8B,0x83,0xA8,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x07,0xC6,0x05,0x9F,0x9B,0x48,0x00,0x01,0x8B,0x83,0xB0,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x07,0xC6,0x05,0x9F,0x9B,0x48,0x00,0x03}), (char[]){0x31,0xD2,0x8D,0x8B,0xA8,0x03,0x00,0x00,0x8B,0x01,0x80,0x78,0x28,0x01,0x75,0x01,0x42,0x8B,0x41,0x04,0x80,0x78,0x28,0x01,0x75,0x02,0xB2,0x02,0x8B,0x41,0x08,0x80,0x78,0x28,0x01,0x75,0x02,0xB2,0x03,0x88,0x15,0x9F,0x9B,0x48,0x00}, VarEmpty}, // 1-8
    {EXEFILE_OFFSET(0x7d7fa), Chr_N_Len({0x33,0xD2,0x8B,0x83,0xA8,0x03,0x00,0x00,0xE8,0xE9,0x2A,0xF9,0xFF,0x33,0xD2,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0xDC,0x2A,0xF9,0xFF,0x33,0xD2,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0xCF,0x2A,0xF9,0xFF,0x8A,0x46,0x03,0xFE,0xC8,0x74,0x0A,0xFE,0xC8,0x74,0x15,0xFE,0xC8,0x74,0x20,0xEB,0x2B,0xB2,0x01,0x8B,0x83,0xA8,0x03,0x00,0x00,0xE8,0xB1,0x2A,0xF9,0xFF,0xEB,0x1C,0xB2,0x01,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0xA2,0x2A,0xF9,0xFF,0xEB,0x0D,0xB2,0x01,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0x93,0x2A,0xF9,0xFF}), (char[]){0x8A,0x46,0x03,0x50,0x3C,0x03,0x0F,0x94,0xC2,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0xE2,0x2A,0xF9,0xFF,0x80,0x3C,0x24,0x02,0x0F,0x94,0xC2,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0xD0,0x2A,0xF9,0xFF,0x80,0x3C,0x24,0x01,0x0F,0x94,0xC2,0x8B,0x83,0xA8,0x03,0x00,0x00,0xE8,0xBE,0x2A,0xF9,0xFF,0x58,0x84,0xC0,0x0F,0x94,0xC2,0x8B,0x83,0x58,0x03,0x00,0x00,0xEB,0x18,0x90,0xB2,0x01,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0xA2,0x2A,0xF9,0xFF,0xEB,0x0D,0xB2,0x01,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0x93,0x2A,0xF9,0xFF}, VarEmpty}, // 1-9
    {EXEFILE_OFFSET(0x7f47f), Chr_N_Len({0xBA,0x96,0x00,0x00,0x00,0x8B,0x83,0xB4,0x01,0x00,0x00,0xE8,0xD5,0xCF,0xFA,0xFF,0xBA,0x96,0x00,0x00,0x00,0x8B,0x83,0xEC,0x02,0x00,0x00,0xE8,0xC5,0xCF,0xFA,0xFF,0xBA,0x96,0x00,0x00,0x00,0x8B,0x83,0x0C,0x03,0x00,0x00,0xE8,0xB5,0xCF,0xFA,0xFF,0xB2,0x01,0x8B,0x83,0xA8,0x03,0x00,0x00,0xE8,0x34,0x0E,0xF9,0xFF,0x33,0xD2,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0x27,0x0E,0xF9,0xFF,0x33,0xD2,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0x1A,0x0E,0xF9,0xFF,0xC6,0x05,0x9F,0x9B,0x48,0x00,0x01,0x5B,0xC3,0x90,0x53,0x8B,0xD8,0xBA,0xFA,0x00,0x00,0x00,0x8B,0x83,0xB4,0x01,0x00,0x00,0xE8,0x71,0xCF,0xFA,0xFF,0xBA,0xFA,0x00,0x00,0x00,0x8B,0x83,0xEC,0x02,0x00,0x00,0xE8,0x61,0xCF,0xFA,0xFF,0xBA,0xFA,0x00,0x00,0x00,0x8B,0x83,0x0C,0x03,0x00,0x00,0xE8,  0x51,0xCF,0xFA,0xFF,0x33,0xD2,0x8B,0x83,0xA8,0x03,0x00,0x00}), (char[]){0x6A,0x01,0x8B,0x04,0x24,0xA2,0x9F,0x9B,0x48,0x00,0xB9,0x0A,0x00,0x00,0x00,0xBA,0x7D,0x00,0x00,0x00,0x48,0x75,0x02,0xB1,0x32,0x48,0x75,0x04,0xB1,0x64,0xB2,0xC8,0x52,0x51,0x52,0x84,0xC0,0x0F,0x94,0xC2,0x8B,0x83,0xAC,0x03,0x00,0x00,0xE8,0x3E,0x0E,0xF9,0xFF,0x5A,0x8B,0x83,0xB4,0x01,0x00,0x00,0xE8,0xA6,0xCF,0xFA,0xFF,0x5A,0x8B,0x83,0xEC,0x02,0x00,0x00,0xE8,0x9A,0xCF,0xFA,0xFF,0x5A,0x8B,0x83,0x0C,0x03,0x00,0x00,0xE8,0x8E,0xCF,0xFA,0xFF,0xEB,0x10,0x53,0x89,0xC3,0x6A,0x00,0xEB,0xA2,0x90,0x53,0x8B,0xD8,0x6A,0x02,0xEB,0x9A,0x90,0x80,0x3C,0x24,0x01,0x0F,0x94,0xC2,0x8B,0x83,0xA8,0x03,0x00,0x00,0xE8,0xF6,0x0D,0xF9,0xFF,0x31,0xD2,0x8B,0x83,0xB0,0x03,0x00,0x00,0xE8,0xE9,0x0D,0xF9,0xFF,0x58,0x84,0xC0,0x0F,0x94,0xC2,0xEB,0x27, 0x51,0xCF,0xFA,0xFF,0x33,0xD2,0x8B,0x83,0xA8,0x03,0x00,0x00}, Var_N_Len(29, 31, 24, 16, 11)}, // 1-2: Mid,Timer2; Mid,Timer1/3; Fast,Timer2; Fast/Sup,Timer1/3; Sup,Timer2 [Note: this array of chars has 12 more chars (51,CF,FA,...,03,00,00) than that in tswRev.rb; this is to be compatible with old tswRev patch v3.1.0 (to restore the last 12 chars in `BYTES_OLD_REV_1_2` (B0,03,...,C3,90))]
    {EXEFILE_OFFSET(0x7f534), Chr_N_Len({0x00,0xE8,0xB6,0x0D,0xF9,0xFF,0xC6,0x05,0x9F,0x9B,0x48,0x00,0x02}), (char[]){0x31,0xD2,0x8B,0x83,0x58,0x03,0x00,0x00,0xE8,0xAF,0x0D,0xF9,0xFF}, VarEmpty}, // 1-3
    {EXEFILE_OFFSET(0x7f5a5), Chr_N_Len({0x5B,0xC3}), (char[]){0xEB,0x8D}, VarEmpty}, // 1-7 (1-4 / 1-5 / 1-6 will be handled separately)
    {EXEFILE_OFFSET(0x839dc), Chr_N_Len({0x84,0x8A,0xFA,0xFF}), (char[]){0xE0,0xBB,0xFF,0xFF}, VarEmpty}, // 1-10
    {EXEFILE_OFFSET(0x83c96), Chr_N_Len({0xCA,0x87,0xFA,0xFF}), (char[]){0x26,0xB9,0xFF,0xFF}, VarEmpty}, // 1-11
    {EXEFILE_OFFSET(0x83e64), Chr_N_Len({0xFC,0x85,0xFA,0xFF}), (char[]){0x58,0xB7,0xFF,0xFF}, VarEmpty}, // 1-12
    {EXEFILE_OFFSET(0x846f8), Chr_N_Len({0x8B,0x83,0x80,0x04,0x00,0x00,0xE8,0xFD,0xED,0xF8,0xFF,0xB2,0x01,0x8B,0x83,0x84,0x04,0x00,0x00,0xE8,0xF0,0xED,0xF8,0xFF,0xA1,0x10,0xC5,0x48,0x00,0xC6,0x80,0x18,0x01,0x00,0x00,0x01,0x33,0xD2,0x8B,0x83,0xEC,0x02,0x00,0x00,0xE8,0x2B,0x7D,0xFA,0xFF}), (char[]){0x8D,0xB3,0x80,0x04,0x00,0x00,0x8B,0x06,0xBF,0x00,0x35,0x41,0x00,0xFF,0xD7,0xB2,0x01,0x8B,0x46,0x04,0xFF,0xD7,0xC6,0x83,0x18,0x01,0x00,0x00,0x01,0x8D,0xB3,0xEC,0x02,0x00,0x00,0x8B,0x06,0x31,0xD2,0xE8,0x30,0x7D,0xFA,0xFF,0xE8,0xAF,0xAE,0xFF,0xFF}, VarEmpty}, // 1-13
    {EXEFILE_OFFSET(0x7f5ab), Chr_N_Len({0x8B,0x83,0xAC,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x07,0x8B,0xC3,0xE8,0x22,0xFF,0xFF,0xFF,0x8B,0x83,0xA8,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x07,0x8B,0xC3,0xE8,0xAB,0xFE,0xFF,0xFF,0x8B,0x83,0xB0,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x07,0x8B,0xC3,0xE8,0x60,0xFF,0xFF,0xFF,0x5B,0xC3}), (char[]){0x0F,0xB6,0x0D,0x9F,0x9B,0x48,0x00,0x83,0xF9,0x03,0x74,0x90,0x51,0xE9,0xC4,0xFE,0xFF,0xFF,0xC3,0x66,0x90,0x0F,0xB6,0x0D,0x9F,0x9B,0x48,0x00,0x85,0xC9,0x74,0xF2,0x41,0x0F,0xAF,0xD1,0xC1,0xEA,0x02,0xE9,0x8D,0xCE,0xFA,0xFF,0x90,0x8B,0x46,0x48,0x31,0xD2,0xE8,0x96,0x0D,0xF9,0xFF,0x8B,0xC3,0xEB,0xC2}, VarEmpty} // 1-14
  )}, {0, Patch_N_Len( // Rev2: prolog bug
    {EXEFILE_OFFSET(0x42b23), Chr_N_Len({0x8B,0x45,0xFC,0x8B,0x80,0x20,0x04,0x00,0x00}), (char[]){0x80,0x3D,0xA1,0x9B,0x48,0x00,0x01,0xEB,0x04}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev4: movement animation
    {EXEFILE_OFFSET(0x4c0d6), Chr_N_Len({0x8B,0x83,0xA8,0x03,0x00,0x00,0x80,0x78,0x28,0x01,0x75,0x0A,0x85,0xF6}), (char[]){0xC1,0xEE,0x02,0xBD,0x04,0x00,0x00,0x00,0xEB,0x29,0x0A,0x0E,0x1C,0x2A}, Var_N_Len(10, 11, 12, 13)},
    {EXEFILE_OFFSET(0x4c114), Chr_N_Len({0x89,0x3D,0x5C,0xC5,0x48,0x00,0x8B,0x83,0x54,0x02,0x00,0x00,0x8B,0x40,0x2C,0x85,0xC0,0x79,0x03,0x83,0xC0,0x03,0xC1,0xF8,0x02,0x3B,0xF0,0x75,0x0D,0xA1,0x5C,0xC5,0x48,0x00,0xC1,0xE0,0x02,0xA3,0x5C,0xC5,0x48,0x00,0x8B,0x83,0x54,0x02,0x00,0x00,0x8B,0x40,0x2C,0xD1,0xF8,0x79,0x03,0x83,0xD0,0x00,0x3B,0xF0,0x75,0x0C,0xA1,0x5C,0xC5,0x48,0x00,0x03,0xC0,0xA3,0x5C,0xC5,0x48,0x00}), (char[]){0x8B,0xC7,0xF7,0xE6,0xA3,0x5C,0xC5,0x48,0x00,0x68,0x5E,0xC1,0x44,0x00,0x66,0x90,0x0F,0xB6,0x05,0x9F,0x9B,0x48,0x00,0x8A,0x80,0xE0,0xC0,0x44,0x00,0x50,0xA1,0xFC,0x9B,0x48,0x00,0x85,0xC0,0x75,0x1A,0x68,0xFC,0xB5,0x4B,0x00,0xE8,0x6B,0x51,0xFB,0xFF,0x68,0x58,0xC1,0x44,0x00,0x50,0xE8,0x34,0x8A,0xFB,0xFF,0xA3,0xFC,0x9B,0x48,0x00,0xFF,0xD0,0xC3,0x53,0x6C,0x65,0x65,0x70,0x00}, VarEmpty},
    {EXEFILE_OFFSET(0x803e6), Chr_N_Len({0x85,0xED,0x0F,0x8E,0xCE,0x03,0x00,0x00,0xC7,0x04,0x24,0x01,0x00,0x00,0x00}), (char[]){0xC1,0xED,0x02,0x89,0x2C,0x24,0x0F,0x1F,0x40,0x00,0xE8,0x2F,0xBD,0xFC,0xFF}, VarEmpty},
    {EXEFILE_OFFSET(0x807b2), Chr_N_Len({0xFF,0x04,0x24,0x4D,0x0F,0x85,0x39,0xFC,0xFF,0xFF,0x8B,0x83,0x54,0x02,0x00,0x00,0x8B,0x40,0x2C}), (char[]){0x01,0x2C,0x24,0x8B,0xC5,0xC1,0xE0,0x02,0x39,0x04,0x24,0x0F,0x86,0x2D,0xFC,0xFF,0xFF,0x66,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev5: battle animation
    {EXEFILE_OFFSET(0x52c26), Chr_N_Len({0xBE,0x1B}), (char[]){0x3C,0x05}, VarEmpty},
    {EXEFILE_OFFSET(0x52c96), Chr_N_Len({0x4E,0x1B}), (char[]){0xCC,0x04}, VarEmpty},
    {EXEFILE_OFFSET(0x53029), Chr_N_Len({0x6A,0x00,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x04,0x45,0x50,0xC7,0x48,0x00,0x48,0x50,0xA1,0x24,0xC5,0x48,0x00,0xE8,0x91,0xAA,0xFC,0xFF,0x8B,0xD0,0x33,0xC9,0x8B,0x83,0xB0,0x01,0x00,0x00,0xE8,0xEE,0x4D,0xFC,0xFF,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x04,0x45,0x48,0xC7,0x48,0x00,0xA3,0xA8,0xC5,0x48,0x00,0x8B,0xC3,0xE8,0x9E,0x1B,0x00,0x00,0x6A,0x00,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x04,0x45,0x48,0xC7,0x48,0x00,0x48,0x03,0x05,0x54,0xC5,0x48,0x00,0x50,0xA1,0x1C,0xC5,0x48,0x00,0xE8,0x42,0xAA,0xFC,0xFF,0x8B,0xD0,0x33,0xC9,0x8B,0x83,0xB0,0x01,0x00,0x00,0xE8,0x9F,0x4D,0xFC,0xFF,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x04,0x45,0x4A,0xC7,0x48,0x00,0xA3,0xA8,0xC5,0x48,0x00,0x8B,0xC3,0xE8,0x4F,0x1B,0x00,0x00,0x6A,0x00,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x04,0x45,0x4A,0xC7,0x48,0x00,0x48,0x03,0x05,0x54,0xC5,0x48,0x00,0x50,0xA1,0x20,0xC5,0x48,0x00,0xE8,0xF3,0xA9,0xFC,0xFF,0x8B,0xD0,0x33,0xC9,0x8B,0x83,0xB0,0x01,0x00,0x00,0xE8,0x50,0x4D,0xFC,0xFF,0x8B,0xC3,0xE8,0xA1,0x12,0xFF,0xFF,0xA1,0xAC,0xC5,0x48,0x00,0x8D,0x04,0x40,0x0F,0xBF,0x0C,0x45,0x4E,0xC7,0x48,0x00,0x8B,0xC1,0xBE,0x0B,0x00,0x00,0x00,0x99,0xF7,0xFE,0x8B,0x83,0x54,0x02,0x00,0x00,0x0F,0xAF,0x50,0x2C,0x89,0x15,0x4C,0xC5,0x48,0x00,0xA1,0xAC,0xC5,0x48,0x00,0x8D}), (char[]){0x6B,0x05,0xAC,0xC5,0x48,0x00,0x06,0x05,0x4C,0xC7,0x48,0x00,0x50,0x31,0xD2,0x31,0xC9,0x8A,0x48,0xF4,0x80,0xE9,0x04,0x80,0xF9,0x01,0x77,0x2A,0x75,0x09,0x6B,0x0D,0xE8,0x87,0x4B,0x00,0x08,0xB5,0x01,0x80,0xE9,0x02,0x80,0x78,0xDC,0x09,0x74,0x09,0x88,0x15,0xD2,0xC5,0x48,0x00,0x8B,0xCA,0x42,0x51,0x8B,0x83,0xB4,0x01,0x00,0x00,0xE8,0xE6,0x93,0xFD,0xFF,0x5A,0x59,0x0F,0xBF,0x41,0x02,0x50,0x0F,0xBF,0x41,0xFE,0x00,0xD0,0x28,0xF0,0x50,0x50,0x0F,0xBF,0x41,0xFC,0x50,0xA3,0xA8,0xC5,0x48,0x00,0x0F,0xBF,0x41,0x04,0x00,0xD0,0x00,0xF0,0x48,0xBA,0x24,0xC5,0x48,0x00,0xE8,0x74,0x00,0x00,0x00,0xE8,0x6F,0x1B,0x00,0x00,0x58,0x48,0x03,0x05,0x54,0xC5,0x48,0x00,0xBA,0x1C,0xC5,0x48,0x00,0xE8,0x5D,0x00,0x00,0x00,0x8F,0x05,0xA8,0xC5,0x48,0x00,0xE8,0x52,0x1B,0x00,0x00,0x58,0x48,0x03,0x05,0x54,0xC5,0x48,0x00,0xBA,0x20,0xC5,0x48,0x00,0xE8,0x40,0x00,0x00,0x00,0xE8,0xC7,0x12,0xFF,0xFF,0xA1,0x18,0xC5,0x48,0x00,0xE8,0xF9,0xA9,0xFC,0xFF,0x8B,0xF8,0x58,0xB1,0x0B,0xF6,0xF1,0x88,0xE2,0x8B,0xB3,0x54,0x02,0x00,0x00,0xF6,0x66,0x2C,0x8B,0xC8,0x88,0xD0,0xF6,0x66,0x2C,0x8B,0xD0,0x8B,0xC7,0xFF,0x35,0x1C,0xC5,0x48,0x00,0xE8,0xB1,0x74,0xFC,0xFF,0xA1,0x14,0xC5,0x48,0x00,0xEB,0x5D,0x66,0x90,0x6A,0x00,0x50,0x8B,0x02,0xE8,0xBE,0xA9,0xFC,0xFF,0x8B,0xD0,0x31,0xC9,0x8B,0x83,0xB0,0x01,0x00,0x00,0xE8,0x1B,0x4D,0xFC,0xFF,0xC3,0x90}, VarEmpty},
    {EXEFILE_OFFSET(0x53167), Chr_N_Len({0x14}), (char[]){0x18}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev6: stair animation
    {EXEFILE_OFFSET(0x42e78), Chr_N_Len({0x14}), (char[]){0x01}, VarEmpty},
    {EXEFILE_OFFSET(0x42eee), Chr_N_Len({0x66,0xC7,0x04,0x46,0x00,0x00,0x66,0xC7,0x44,0x46,0x02,0x00,0x00,0x66,0xC7,0x44,0x46,0x04,0x00,0x00,0xFF,0x03,0x8B,0x03,0x8D,0x04,0x40,0x66,0xC7,0x04,0x46,0x01,0x00,0x66,0xC7,0x44,0x46,0x02,0x09,0x00,0x66,0xC7,0x44,0x46,0x04}), (char[]){0x31,0xD2,0x89,0x14,0x46,0x66,0x89,0x54,0x46,0x04,0xFF,0x03,0x83,0xC0,0x03,0x89,0x54,0x46,0x02,0x80,0x3D,0x9F,0x9B,0x48,0x00,0x01,0x0F,0x93,0xC2,0x66,0x89,0x14,0x46,0x0F,0x96,0xC2,0x80,0xC2,0x09,0x88,0x54,0x46,0x02,0xEB,0x02}, VarEmpty},
    {EXEFILE_OFFSET(0x5433b), Chr_N_Len({0x0F,0xBF,0x04,0x4D,0x50,0xC7,0x48,0x00,0xA3,0x70,0xC5,0x48,0x00,0xA1,0x70,0xC5,0x48,0x00,0x0F,0xB6,0xB8,0x1F,0x9B,0x48,0x00,0x8B,0xC7,0x8B,0x93,0x54,0x02,0x00,0x00,0x8B,0x72,0x2C,0xF7,0xEE,0x6B,0xD6,0x0B,0x8B,0xF2,0x99,0xF7,0xFE,0x89,0x15,0x4C,0xC5,0x48,0x00,0xA1,0x70,0xC5,0x48,0x00,0x8B,0xC7,0x8B,0x93,0x54,0x02,0x00,0x00,0x8B,0x72,0x30,0xF7,0xEE,0x6B,0xD6,0x0B,0x8B,0xFA,0x99,0xF7,0xFF,0xF7,0xEE,0xA3,0x50,0xC5,0x48,0x00,0x66,0x8B,0x04,0x4D,0x4E,0xC7,0x48,0x00,0x66,0x83,0xE8,0x01,0x72,0x0B,0x0F,0x84,0x35,0x01,0x00,0x00,0xE9,0x3F,0x04,0x00,0x00,0x83,0x3D,0xEC,0x87}), (char[]){0x31,0xFF,0x47,0x80,0x3D,0x9F,0x9B,0x48,0x00,0x01,0x77,0x21,0x47,0x73,0x1E,0xD1,0xE7,0xEB,0x1A,0x83,0x3D,0x70,0xC5,0x48,0x00,0x79,0x0F,0x84,0x62,0x04,0x00,0x00,0x4F,0x0F,0x84,0x86,0x04,0x00,0x00,0xFF,0x0D,0xAC,0xC5,0x48,0x00,0x6B,0x35,0xAC,0xC5,0x48,0x00,0x06,0x81,0xC6,0x4E,0xC7,0x48,0x00,0x0F,0xB7,0x46,0x02,0xA3,0x70,0xC5,0x48,0x00,0x0F,0xB6,0x80,0x1F,0x9B,0x48,0x00,0xB1,0x0B,0xF6,0xF1,0x88,0xE2,0x8B,0x8B,0x54,0x02,0x00,0x00,0xF6,0x61,0x2C,0xA3,0x50,0xC5,0x48,0x00,0x88,0xD0,0xF6,0x61,0x2C,0xA3,0x4C,0xC5,0x48,0x00,0x80,0x3E,0x00,0x74,0x1E,0xE9,0x2C,0x01,0x00,0x00}, VarEmpty},
    {EXEFILE_OFFSET(0x54492), Chr_N_Len({0x01}), (char[]){0x02}, VarEmpty},
    {EXEFILE_OFFSET(0x544d5), Chr_N_Len({0x0F,0x03,0x00,0x00}), (char[]){0x82,0xFE,0xFF,0xFF}, VarEmpty},
    {EXEFILE_OFFSET(0x547b4), Chr_N_Len({0x83,0x3D,0x70,0xC5,0x48,0x00,0x79}), (char[]){0xE9,0x95,0xFB,0xFF,0xFF,0x66,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev7: door-opening animation
    {EXEFILE_OFFSET(0x53a2a), Chr_N_Len({0x8B,0xC3,0xE8,0xAF,0x36,0x02,0x00,0xE9,0xB2,0x0D,0x00,0x00}), (char[]){0x68,0xE8,0x47,0x45,0x00,0xE9,0xDC,0x26,0x01,0x00,0x66,0x90}, VarEmpty},
    {EXEFILE_OFFSET(0x660d0), Chr_N_Len({0x53,0x56,0x57,0x51,0x89,0x04,0x24,0xB8,0xAC,0xC5,0x48,0x00,0xBA,0x4C,0xC7,0x48,0x00,0xBE,0x58,0xC5,0x48,0x00,0x8B,0x08,0x8D,0x0C,0x49,0x0F,0xBF,0x5C,0x4A,0x02,0x89,0x1E,0x0F,0xBF,0x5C,0x4A,0x04,0x89,0x1D,0x5C,0xC5,0x48,0x00,0x66,0xC7,0x04,0x4A,0x00,0x00,0x66,0xC7,0x44,0x4A,0x02,0x00,0x00,0x66,0xC7,0x44,0x4A,0x04,0x10,0x00,0xFF,0x00,0x8B,0x08,0x8D,0x0C,0x49,0x66,0xC7,0x04,0x4A,0x0D,0x00,0x8B,0x18,0x8D,0x1C,0x5B,0x66,0x8B,0x0E,0x66,0x89,0x4C,0x5A,0x02,0x8B,0x38,0x8D,0x3C,0x7F,0x66,0x8B,0x1D,0x5C,0xC5,0x48,0x00,0x66,0x89,0x5C,0x7A,0x04,0xFF,0x00,0x8B,0x38,0x8D,0x3C,0x7F}), (char[]){0x50,0xE8,0x4A,0xD0,0xFD,0xFF,0x58,0xE8,0x44,0xD0,0xFD,0xFF,0xBA,0xAC,0xC5,0x48,0x00,0x6B,0x02,0x06,0x05,0x4C,0xC7,0x48,0x00,0xFF,0x0A,0x8B,0x50,0x02,0xB9,0x10,0x00,0x00,0x00,0xC7,0x00,0x00,0x00,0x00,0x00,0x89,0x48,0x04,0xC6,0x40,0x06,0x0D,0x89,0x50,0x08,0x83,0xC0,0x0C,0x83,0x05,0xAC,0xC5,0x48,0x00,0x02,0xE2,0xE4,0xC3,0xA0,0x9F,0x9B,0x48,0x00,0xFE,0xC8,0x3C,0x01,0x0F,0x96,0xC2,0x00,0xD0,0xB1,0x02,0x28,0xC1,0xBA,0xAC,0xC5,0x48,0x00,0x6B,0x02,0x06,0x05,0x4A,0xC7,0x48,0x00,0x84,0x08,0x74,0x08,0x83,0x2A,0x02,0x83,0xE8,0x0C,0xEB,0xF4,0x8B,0xC3,0xE9,0x9E,0x0F,0x01,0x00,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev10: keyboard (10-b: anti-misop)
    {EXEFILE_OFFSET(0x60be2), Chr_N_Len({0x83,0x3D,0xAC,0xC5,0x48,0x00,0x00,0x7D,0x07,0x33,0xC0,0xA3,0xAC,0xC5,0x48,0x00,0x8B,0x83,0x28,0x03,0x00,0x00,0x80,0x78,0x29,0x01,0x0F,0x85,0xA1,0x04,0x00,0x00,0x83,0x3D,0xAC,0xC5,0x48,0x00,0x00,0x0F,0x85,0x94,0x04,0x00,0x00}), (char[]){0x31,0xC0,0x8A,0x16,0x80,0xEA,0x25,0x80,0xFA,0x03,0x76,0x21,0x39,0x05,0xAC,0xC5,0x48,0x00,0x0F,0x8F,0xA9,0x04,0x00,0x00,0xA3,0xAC,0xC5,0x48,0x00,0x8B,0x83,0x28,0x03,0x00,0x00,0x80,0x78,0x29,0x01,0x0F,0x85,0x94,0x04,0x00,0x00}, VarEmpty},
    {EXEFILE_OFFSET(0x60c6f), Chr_N_Len({0xC7,0x05,0x90,0xC5,0x48,0x00,0x01,0x00,0x00,0x00,0x6B,0x05,0xA4,0x86,0x4B,0x00,0x0B,0x03,0x05,0xA0,0x86,0x4B,0x00,0xA3,0x80,0xC5,0x48,0x00,0xC7,0x05,0xE8,0x87,0x4B,0x00,0x04,0x00,0x00,0x00,0xA1,0x80,0xC5,0x48,0x00,0x83,0xE8,0x0B,0xA3,0x84}), (char[]){0xE9,0x04,0x01,0x00,0x00,0x78,0x87,0x96,0xE1,0x00,0x14,0x64,0xAF,0x4B,0x4B,0x96,0xE1,0xB0,0x4B,0x48,0x00,0x5C,0x4B,0x48,0x00,0x04,0x4C,0x48,0x00,0x58,0x4C,0x48,0x00,0x80,0x3D,0xC7,0xC5,0x48,0x00,0x25,0x73,0x05,0xE8,0xB6,0xB7,0xFC,0xFF,0xC3}, Var_N_Len(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)},
    {EXEFILE_OFFSET(0x60d78), Chr_N_Len({0xC7,0x05,0x90,0xC5,0x48,0x00,0x02,0x00,0x00,0x00,0x6B,0x05,0xA4,0x86,0x4B,0x00,0x0B,0x03,0x05,0xA0,0x86,0x4B,0x00,0xA3,0x80,0xC5,0x48,0x00,0xC7,0x05,0xE8,0x87,0x4B,0x00,0x02,0x00,0x00,0x00,0xA1,0x80,0xC5,0x48,0x00,0x48,0xA3,0x84,0xC5,0x48,0x00,0x83,0x3D,0xA0,0x86,0x4B,0x00,0x00,0x0F,0x84,0xED,0x02,0x00,0x00,0x8B,0xC3,0xE8,0xD3,0x36,0xFE,0xFF,0xE9,0xE1,0x02,0x00,0x00}), (char[]){0x0F,0xB6,0x0E,0x8B,0x83,0x0C,0x03,0x00,0x00,0xBA,0xC7,0xC5,0x48,0x00,0x38,0x0A,0x0F,0x84,0x15,0x03,0x00,0x00,0x80,0x3A,0x00,0x88,0x0A,0xBF,0x50,0x18,0x46,0x00,0xBA,0x0C,0x18,0x46,0x00,0x0F,0x45,0xFA,0x8A,0x0D,0x9F,0x9B,0x48,0x00,0x8A,0x89,0x74,0x0C,0x46,0x00,0x89,0x48,0x24,0xB2,0x01,0xE8,0x9E,0xB6,0xFC,0xFF,0x0F,0xB6,0x06,0xFF,0xD7,0xE9,0xE3,0x02,0x00,0x00,0x66,0x90}, VarEmpty},
    {EXEFILE_OFFSET(0x60e24), Chr_N_Len({0xC7,0x05,0x90,0xC5,0x48}), (char[]){0xE9,0x4F,0xFF,0xFF,0xFF}, VarEmpty},
    {EXEFILE_OFFSET(0x60ed0), Chr_N_Len({0xC7,0x05,0x90,0xC5,0x48}), (char[]){0xE9,0xA3,0xFE,0xFF,0xFF}, VarEmpty},
    {EXEFILE_OFFSET(0x4bc18), Chr_N_Len({0x38,0x08,0xFE,0xFF}), (char[]){0x74,0x50,0x01,0x00}, VarEmpty},
    {EXEFILE_OFFSET(0x61763), Chr_N_Len({0x66,0xA1,0xC6,0xC5,0x48,0x00,0x66,0x83,0xE8,0x01,0x72,0x07,0x74,0x14,0xE9,0x82,0x01,0x00,0x00,0x33,0xD2}), (char[]){0x31,0xD2,0x31,0xC0,0xA0,0xC7,0xC5,0x48,0x00,0x3C,0x25,0x73,0x46,0x38,0x15,0xC6,0xC5,0x48,0x00,0x75,0x0D}, VarEmpty},
    {EXEFILE_OFFSET(0x617b6), Chr_N_Len({0xA1,0xA4,0x86,0x4B,0x00,0x6B,0xD0,0x0B,0x03,0x15,0xA0,0x86,0x4B,0x00,0x89,0x15,0x80,0xC5,0x48,0x00,0x8B,0x15,0x80,0xC5,0x48,0x00,0x83,0xEA,0x0B,0x89,0x15,0x84,0xC5,0x48,0x00,0x85,0xC0,0x0F,0x84,0x17,0x01,0x00,0x00,0x8B,0xC3,0xE8,0xA8,0x2C,0xFE,0xFF,0xE9,0x0B,0x01,0x00,0x00,0x6B,0x15,0xA4,0x86,0x4B,0x00,0x0B,0xA1,0xA0,0x86,0x4B,0x00,0x03,0xD0,0x89,0x15,0x80,0xC5,0x48,0x00,0x8B,0x15,0x80,0xC5,0x48,0x00,0x4A,0x89,0x15,0x84,0xC5,0x48,0x00,0x85,0xC0,0x0F,0x84,0xE2,0x00,0x00,0x00,0x8B,0xC3,0xE8,0x73,0x2C,0xFE,0xFF,0xE9,0xD6,0x00,0x00,0x00,0x6B,0x15,0xA4,0x86,0x4B,0x00,0x0B,0xA1,0xA0,0x86,0x4B,0x00,0x03,0xD0,0x89,0x15,0x80,0xC5,0x48,0x00,0x8B,0x15,0x80,0xC5,0x48,0x00,0x42,0x89,0x15,0x84,0xC5,0x48,0x00,0x83,0xF8,0x0A,0x0F,0x84,0xAC,0x00,0x00,0x00,0x8B,0xC3,0xE8,0x3D,0x2C,0xFE,0xFF,0xE9,0xA0,0x00,0x00,0x00,0xA1,0xA4,0x86,0x4B,0x00,0x6B,0xD0,0x0B,0x03,0x15,0xA0,0x86,0x4B,0x00,0x89,0x15,0x80,0xC5,0x48,0x00,0x8B,0x15,0x80,0xC5,0x48,0x00,0x83,0xC2,0x0B,0x89,0x15,0x84,0xC5,0x48,0x00,0x83,0xF8,0x0A,0x74,0x78,0x8B,0xC3,0xE8,0x09}), (char[]){0x50,0x50,0xE8,0x0F,0x38,0xFA,0xFF,0x31,0xD2,0x66,0x85,0xC0,0x8B,0x83,0x0C,0x03,0x00,0x00,0xB9,0x78,0x0C,0x46,0x00,0x78,0x0F,0x89,0x14,0x24,0x88,0x15,0xC7,0xC5,0x48,0x00,0x88,0x50,0x20,0x8D,0x49,0x04,0x8A,0x15,0x9F,0x9B,0x48,0x00,0x8A,0x14,0x11,0x83,0xC2,0x32,0xE8,0x75,0xAC,0xFC,0xFF,0x58,0x85,0xC0,0x74,0x05,0xE8,0x13,0x00,0x00,0x00,0x5B,0xC3,0x90,0x02,0x02,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x00,0x0A,0x0A,0xFF,0xF5,0x01,0x0B,0xBA,0xA0,0x86,0x4B,0x00,0x8D,0x88,0xDB,0x17,0x46,0x00,0x02,0x11,0x8A,0x12,0x3A,0x51,0x04,0x74,0x30,0xB2,0xA0,0x8A,0x61,0x08,0x6B,0x4A,0x04,0x0B,0x03,0x0A,0x00,0xE1,0xB4,0x00,0x6B,0x52,0xF8,0x7B,0x8A,0x8C,0x11,0x36,0x89,0x4B,0x00,0x80,0xE9,0x04,0x80,0xF9,0x39,0x72,0x0E,0xB9,0x34,0x89,0x4B,0x00,0x80,0x39,0x00,0x74,0x20,0xFE,0x09,0xC3,0x90,0x83,0x3D,0xAC,0xC5,0x48,0x00,0x00,0x7F,0x13,0x0F,0xB6,0x0D,0x9F,0x9B,0x48,0x00,0x8A,0x89,0xFC,0x17,0x46,0x00,0x88,0x0D,0x34,0x89,0x4B,0x00,0x8D,0x48,0xDB,0x8B,0x83,0x28,0x03,0x00,0x00,0x80,0x78,0x29,0x01,0x75,0xD3,0x8B,0xC3,0xFF,0x24,0x8D,0x80,0x0C,0x46,0x00}, (const UINT[]){70, 71, 72, 73}, 4, {misop_vals}},
    {EXEFILE_OFFSET(0x6179e), Chr_N_Len({0xB6,0x17,0x46,0x00,0xED,0x17,0x46,0x00,0x22,0x18,0x46,0x00,0x58,0x18,0x46,0x00}), (char[]){0xF8,0x18,0x46,0x00,0xF8,0x18,0x46,0x00,0xF8,0x18,0x46,0x00,0xF8,0x18,0x46,0x00}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev11: game window position
    {EXEFILE_OFFSET(0x84ffa), Chr_N_Len({0x33,0xD2,0xA1,0x10,0xC5,0x48,0x00,0xE8,0xB2,0xE0,0xF8,0xFF,0xA0,0xA4,0x9B,0x48,0x00,0x2C,0x01,0x72,0x07,0x74,0x74,0xE9,0xD9,0x00,0x00,0x00,0xA1,0xFC,0xA6,0x48,0x00,0xE8,0x88,0xEB,0xF9,0xFF,0x3D,0x80,0x02,0x00,0x00,0x7F,0x32,0xBA,0xFC,0xFF,0xFF,0xFF,0xA1,0x10,0xC5,0x48,0x00,0xE8,0x62,0xE0,0xF8,0xFF,0xBA,0xA8,0x01,0x00,0x00,0xA1,0x10,0xC5,0x48,0x00,0xE8,0xD7,0xC4,0xF9,0xFF,0xBA,0x88,0x02,0x00,0x00,0xA1,0x10,0xC5,0x48,0x00,0xE8,0x84,0xE0,0xF8,0xFF,0xE9,0x96,0x00,0x00,0x00,0x33,0xD2,0xA1,0x10,0xC5,0x48,0x00,0xE8,0x33,0xE0,0xF8,0xFF,0xBA,0xA8,0x01,0x00,0x00,0xA1,0x10,0xC5,0x48,0x00,0xE8,0xA8,0xC4,0xF9,0xFF,0xBA,0x88,0x02,0x00,0x00,0xA1,0x10,0xC5,0x48,0x00,0xE8,0x55,0xE0,0xF8,0xFF,0xEB,0x6A,0xA1,0xFC,0xA6,0x48,0x00,0xE8,0x19,0xEB,0xF9,0xFF,0x3D,0x20,0x03,0x00,0x00,0x7F,0x2F}), (char[]){0x8D,0x55,0xEC,0x8B,0xC3,0x6A,0x00,0x52,0x6A,0x00,0x6A,0x30,0xE8,0x65,0xC3,0xF9,0xFF,0xBE,0x88,0x02,0x00,0x00,0xBF,0xA8,0x01,0x00,0x00,0x80,0x3D,0xA4,0x9B,0x48,0x00,0x00,0x74,0x08,0x66,0xBE,0x28,0x03,0x66,0xBF,0x12,0x02,0x03,0x7B,0x30,0x2B,0x7D,0xF8,0xE8,0xFB,0x01,0xF8,0xFF,0x80,0x7B,0x5C,0x00,0x74,0x12,0x8B,0x53,0x24,0xD1,0xE2,0x03,0x53,0x2C,0x8B,0x4B,0x28,0xD1,0xE1,0x03,0x4B,0x30,0xEB,0x0C,0x8B,0x55,0xEC,0x03,0x55,0xF4,0x8B,0x4D,0xF0,0x03,0x4D,0xF8,0x29,0xF2,0xD1,0xFA,0x29,0xF9,0xD1,0xF9,0x8B,0x45,0xF4,0x29,0xF0,0x40,0x40,0x39,0xD0,0x0F,0x4C,0xD0,0x8B,0x45,0xF8,0x29,0xF8,0x40,0x40,0x39,0xC8,0x0F,0x4C,0xC8,0x8B,0x45,0xEC,0x48,0x48,0x39,0xC2,0x0F,0x4C,0xD0,0x8B,0x45,0xF0,0x39,0xC1,0x0F,0x4C,0xC8,0x56,0x57,0x8B,0xC3,0xE8,0x1C,0x17,0xF9,0xFF,0x80,0x4B,0x5C,0x07,0xEB,0x59}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev8-a: 33F traproom bug
    {EXEFILE_OFFSET(0x54e0b), Chr_N_Len({0x33,0xD2,0x8B,0x83,0xCC,0x01,0x00,0x00,0xE8,0xE8,0xE6,0xFB,0xFF,0x33,0xD2,0x8B,0x83,0xD0,0x01,0x00,0x00,0xE8,0xDB,0xE6,0xFB,0xFF,0x33,0xD2,0x8B,0x83,0xD4,0x01,0x00,0x00}), (char[]){0x31,0xFF,0x31,0xD2,0x8B,0x84,0xBB,0xCC,0x01,0x00,0x00,0xE8,0xE5,0xE6,0xFB,0xFF,0x47,0x83,0xFF,0x03,0x75,0xEC,0xA0,0x46,0x99,0x4B,0x00,0xA2,0x5C,0x99,0x4B,0x00,0xEB,0x05}, VarEmpty},
    {EXEFILE_OFFSET(0x73723), Chr_N_Len({0x66,0xC7,0x04,0x46,0x00,0x00,0x8B,0x03,0x8D,0x04,0x40,0x66,0xC7,0x44,0x46,0x02,0x00,0x00,0x8B,0x03,0x8D,0x04,0x40,0x66,0xC7,0x44,0x46}), (char[]){0x8D,0x04,0x46,0x31,0xD2,0x89,0x10,0x66,0x89,0x50,0x04,0xC6,0x05,0x46,0x99,0x4B,0x00,0x06,0xC6,0x05,0x5C,0x99,0x4B,0x00,0x06,0xEB,0x03}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev8-b: 40F boss status bar bug
    {EXEFILE_OFFSET(0x740be), Chr_N_Len({0x66,0xC7}), (char[]){0xEB,0x48}, VarEmpty}
  )}, {0, Patch_N_Len( // Rev9: wrong gold status bar bug
    {EXEFILE_OFFSET(0x7ff54), Chr_N_Len({0xFF,0x57,0x0C,0xFF,0x75,0xF4,0x68,0x7C,0x02,0x48,0x00,0x8D,0x55,0xF0,0xA1,0xB8,0xC5,0x48,0x00,0x03,0xC0,0x8B,0x04,0xC5,0x1C,0x99,0x48,0x00,0xE8,0xF7,0x5B,0xF8,0xFF,0xFF,0x75,0xF0,0x8D,0x4D,0xEC,0x8B,0x45,0xFC,0x8B,0x80,0x4C,0x04,0x00,0x00,0x8B,0x80,0x00,0x01,0x00,0x00}), (char[]){0x89,0x45,0xEC,0xFF,0x57,0x0C,0xFF,0x75,0xF4,0x68,0x7C,0x02,0x48,0x00,0xA1,0xB8,0xC5,0x48,0x00,0x01,0xC0,0x8B,0x04,0xC5,0x1C,0x99,0x48,0x00,0x8B,0x15,0x04,0x87,0x4B,0x00,0x42,0xF7,0xE2,0x8D,0x55,0xF0,0xE8,0xEB,0x5B,0xF8,0xFF,0xFF,0x75,0xF0,0x8D,0x4D,0xEC,0x8B,0x01,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // tswMod #0 (12): 49F sorcerer bug
    {EXEFILE_OFFSET(0x637dd), Chr_N_Len({0xFF,0x03}), (char[]){0x90,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // tswSL (13): allow loading data during event
    {EXEFILE_OFFSET(0x5084d), Chr_N_Len({0x33,0xD2}), (char[]){0xEB,0x0B}, VarEmpty}
  )}, {0, Patch_N_Len( // tswBGM_1 (14): allow consecutive WAV
    {EXEFILE_OFFSET(0x312cb), Chr_N_Len({0x80,0xBB,0xE2,0x01,0x00,0x00,0x00,0x74,0x17,0x80,0xBB,0xE0,0x01,0x00,0x00,0x00,0x74,0x07,0x83,0x8B,0xDC,0x01,0x00,0x00,0x02,0xC6,0x83,0xE2,0x01,0x00,0x00,0x00,0x80,0xBB,0xE4,0x01,0x00,0x00,0x00,0x74,0x18,0x83,0x8B,0xDC,0x01,0x00,0x00,0x04,0x8B,0x83,0xF0,0x01,0x00,0x00,0x89,0x44,0x24,0x04,0xC6,0x83,0xE4,0x01,0x00,0x00,0x00}), (char[]){0x8B,0x43,0x04,0x3B,0x98,0xD8,0x02,0x00,0x00,0x74,0x3D,0x31,0xD2,0x89,0x54,0x24,0x04,0x05,0x64,0x04,0x00,0x00,0x3B,0x18,0x74,0x1F,0x3B,0x58,0xFC,0xB2,0x04,0x74,0x02,0xB2,0x40,0xB8,0x3B,0xA1,0x4B,0x00,0x8A,0x08,0x39,0x15,0xAC,0xC5,0x48,0x00,0x0F,0x9F,0x00,0x7F,0x0C,0x84,0xC9,0x75,0x08,0x83,0x8B,0xDC,0x01,0x00,0x00,0x04,0x90}, VarEmpty}
  )}, {0, Patch_N_Len( // tswBGM_2 (15): do not change BGM/WAV settings when loading
    {EXEFILE_OFFSET(0x7ebad), Chr_N_Len({0x6A,0x00,0xBA,0x34,0x89,0x4B,0x00,0xB9,0x81,0x18,0x00,0x00,0xB8,0x00,0xC6,0x48,0x00,0xE8,0x91,0x56,0xF8,0xFF,0xE8,0x48,0x3B,0xF8,0xFF,0x6A,0x00,0xBA,0x88,0x86,0x4B,0x00,0xB9,0xAC,0x02,0x00,0x00,0xB8,0x00,0xC6,0x48,0x00,0xE8,0x76,0x56,0xF8,0xFF,0xE8,0x2D,0x3B,0xF8,0xFF,0xB8,0x00,0xC6,0x48,0x00,0xE8,0xCB,0x56,0xF8,0xFF,0xE8,0x1E,0x3B,0xF8,0xFF}), (char[]){0x31,0xFF,0xA1,0x00,0xC6,0x48,0x00,0x50,0x8D,0x4D,0xF8,0x57,0x51,0x68,0xAC,0x02,0x00,0x00,0x68,0x88,0x86,0x4B,0x00,0x50,0x57,0x51,0x68,0x81,0x18,0x00,0x00,0xBA,0x34,0x89,0x4B,0x00,0x52,0x50,0xBE,0xF0,0x87,0x4B,0x00,0x87,0x3E,0x29,0x7A,0xE4,0x29,0x7A,0xE8,0xE8,0xAB,0x26,0xF8,0xFF,0xE8,0xA6,0x26,0xF8,0xFF,0xE8,0x39,0x26,0xF8,0xFF,0x89,0x3E,0x90}, VarEmpty},
    {EXEFILE_OFFSET(0x7ec3a), Chr_N_Len({0x6A,0x00,0xBA,0x34,0x89,0x4B,0x00,0xB9,0x81,0x18,0x00,0x00,0xB8,0x00,0xC6,0x48,0x00,0xE8,0x04,0x56,0xF8,0xFF,0xE8,0xBB,0x3A,0xF8,0xFF,0x6A,0x00,0xBA,0x88,0x86,0x4B,0x00,0xB9,0xAC,0x02,0x00,0x00,0xB8,0x00,0xC6,0x48,0x00,0xE8,0xE9,0x55,0xF8,0xFF,0xE8,0xA0,0x3A,0xF8,0xFF,0xB8,0x00,0xC6,0x48,0x00,0xE8,0x3E,0x56,0xF8,0xFF,0xE8,0x91,0x3A,0xF8,0xFF}), (char[]){0x31,0xFF,0xA1,0x00,0xC6,0x48,0x00,0x50,0x8D,0x4D,0xF8,0x57,0x51,0x68,0xAC,0x02,0x00,0x00,0x68,0x88,0x86,0x4B,0x00,0x50,0x57,0x51,0x68,0x81,0x18,0x00,0x00,0xBA,0x34,0x89,0x4B,0x00,0x52,0x50,0xBE,0xF0,0x87,0x4B,0x00,0x87,0x3E,0x29,0x7A,0xE4,0x29,0x7A,0xE8,0xE8,0x1E,0x26,0xF8,0xFF,0xE8,0x19,0x26,0xF8,0xFF,0xE8,0xAC,0x25,0xF8,0xFF,0x89,0x3E,0x90}, VarEmpty},
    {EXEFILE_OFFSET(0x55aab), Chr_N_Len({0x83,0xBE,0x64,0x01,0x00,0x00,0x00,0x75,0x0D,0xB2,0x01,0x8B,0x83,0x2C,0x03,0x00,0x00,0xE8,0x2F,0xA8,0xFB,0xFF,0x83,0xBE,0x68,0x01,0x00,0x00,0x00,0x74,0x14,0xB2,0x01,0x8B,0x83,0x30,0x03,0x00,0x00,0xE8,0x19,0xA8}), (char[]){0xBF,0xA3,0x9B,0x48,0x00,0x80,0x3F,0x00,0x75,0x0B,0x8B,0x83,0x6C,0x04,0x00,0x00,0xE8,0xC8,0xB6,0xFD,0xFF,0xBA,0xEC,0x87,0x4B,0x00,0x8A,0x07,0x88,0x02,0x8A,0x47,0xFF,0x84,0xC0,0x75,0x17,0x88,0x42,0x04,0xEB,0x25}, VarEmpty}
  )}
};
